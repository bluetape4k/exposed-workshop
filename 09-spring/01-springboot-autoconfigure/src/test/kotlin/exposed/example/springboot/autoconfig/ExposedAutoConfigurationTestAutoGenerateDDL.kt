package exposed.example.springboot.autoconfig

import exposed.example.springboot.Application
import exposed.example.springboot.tables.TestEntity
import exposed.example.springboot.tables.TestTable
import io.bluetape4k.junit5.coroutines.runSuspendIO
import io.bluetape4k.support.uninitialized
import org.amshove.kluent.shouldBeEmpty
import org.amshove.kluent.shouldBeEqualTo
import org.amshove.kluent.shouldBeTrue
import org.amshove.kluent.shouldNotBeNull
import org.jetbrains.exposed.spring.SpringTransactionManager
import org.jetbrains.exposed.sql.exists
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.transactions.experimental.newSuspendedTransaction
import org.jetbrains.exposed.sql.transactions.experimental.suspendedTransactionAsync
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.transaction.annotation.Transactional

/**
 * 자동으로 테이블을 조회하여 스키마를 생성합니다.
 *
 * ```sql
 * -- H2
 * CREATE TABLE IF NOT EXISTS TEST_TABLE (
 *      ID INT AUTO_INCREMENT PRIMARY KEY,
 *      "name" VARCHAR(100) NOT NULL,
 *      CREATED_AT DATETIME(9) DEFAULT CURRENT_TIMESTAMP NOT NULL
 * );
 *
 * CREATE TABLE IF NOT EXISTS IGNORED_TABLE (
 *      ID INT AUTO_INCREMENT PRIMARY KEY,
 *      "name" VARCHAR(100) NOT NULL,
 *      CREATED_AT DATETIME(9) DEFAULT CURRENT_TIMESTAMP NOT NULL
 * );
 * ```
 */
@SpringBootTest(
    classes = [Application::class],
    properties = [
        "spring.datasource.url=jdbc:h2:mem:test-ddl",
        "spring.datasource.driver-class-name=org.h2.Driver",
        "spring.exposed.generate-ddl=true",    // DDL 자동 생성 여부
        "spring.exposed.show-sql=true"         // SQL 로그 출력 여부
    ]
)
class ExposedAutoConfigurationTestAutoGenerateDDL {

    // Exposed 에서 제공하는 SpringTransactionManager 를 사용합니다.
    @Autowired
    private val springTransactionManager: SpringTransactionManager = uninitialized()

    @Autowired
    private val asyncService: AsyncExposedService = uninitialized()

    @Test
    fun `데이터베이스 커넥션이 초기화되어야 합니다`() {
        springTransactionManager.shouldNotBeNull()
    }

    /**
     * 다음과 같이 SQL 구문이 출력된다.
     *
     * ```
     * SQL: SELECT COUNT(*) FROM TEST_TABLE
     * ```
     */
    @Test
    @Transactional
    fun `데이터베이스 스키마가 생성되어야 합니다`() {
        TestTable.exists().shouldBeTrue()
        TestTable.selectAll().count() shouldBeEqualTo 0L
    }

    @Test
    @Transactional
    fun `AsyncExposedService 가 초기회 되고 정상적으로 동작해야 합니다`() {
        asyncService.shouldNotBeNull()

        // Platform Threads 를 사용하는 방식
        asyncService.allTestDataAsync().join().shouldBeEmpty()

        // Virtual Threads 를 사용하는 방식
        asyncService.allTestDataVirtualThreads().join().shouldBeEmpty()
    }

    @Test
    @Transactional
    fun `Coroutines 환경에서 정상적으로 동작해야 합니다`() = runSuspendIO {
        val query = TestTable.selectAll()
        newSuspendedTransaction {
            TestEntity.wrapRows(query).toList().shouldBeEmpty()
        }

        suspendedTransactionAsync {
            TestEntity.wrapRows(query).toList().shouldBeEmpty()
        }.await()
    }
}
